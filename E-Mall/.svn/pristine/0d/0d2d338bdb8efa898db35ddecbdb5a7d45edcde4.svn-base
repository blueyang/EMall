package ustc.sse.water.web.controller;


import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import ustc.sse.water.pojo.Advertisement;
import ustc.sse.water.pojo.Announcement;
import ustc.sse.water.pojo.BasketItem;
import ustc.sse.water.pojo.BookGoods;
import ustc.sse.water.pojo.Buyer;
import ustc.sse.water.pojo.FruitGoods;
import ustc.sse.water.pojo.Product;
import ustc.sse.water.pojo.ProductType;
import ustc.sse.water.pojo.QueryResult;
import ustc.sse.water.pojo.Seller;
import ustc.sse.water.pojo.Shop;
import ustc.sse.water.service.AdminService;
import ustc.sse.water.service.BuyerService;
import ustc.sse.water.service.ProductService;
import ustc.sse.water.service.SellerService;
import ustc.sse.water.utils.GZipUtil;

/**
 * 主控制器. <br>
 * 负责将基本的跳转分发到买家，卖家和管理员.
 * <p>
 * Copyright: Copyright (c) 2013年12月23日 下午10:17:42
 * <p>
 * Company: 中国科学技术大学软件学院
 * <p>
 * @author wangytao@mail.ustc.edu.cn
 * @version 1.0.0
 */
@Controller
public class MainController {

	ProductService productService;
	
	private AdminService adminService;
	
	@Resource(name="BuyerService")
	protected BuyerService buyerService;
	
	public ProductService getProductService() {
		return productService;
	}

	@Resource(name="ProductService")
	public void setProductService(ProductService productService) {
		this.productService = productService;
	}

	public AdminService getAdminService() {
		return adminService;
	}

	@Resource(name="AdminService")
	public void setAdminService(AdminService adminService) {
		this.adminService = adminService;
	}

	@Resource(name="SellerService")
	protected SellerService sellerService;
	
	@SuppressWarnings("unchecked")
	@RequestMapping("")
	public String welcome(HttpServletRequest request, HttpServletResponse response){
		
		List<Product> top3 = new ArrayList<Product>();
		
		top3 = (List<Product>) request.getSession().getAttribute("top3");
		if (top3 == null) {
			top3 = productService.getTop3();
			request.getSession().setAttribute("top3", top3);
		}
		
		/*List<Shop> mallAdvice = new ArrayList<Shop>();
		mallAdvice = sellerService.getHighScoreShop();*/
		
		List<Advertisement> Advertisements = this.adminService.getAdvertisements();
		request.getSession().setAttribute("Advertisements", Advertisements);
		
		List<Announcement> Announcements = this.adminService.getAnnouncements();
		request.getSession().setAttribute("Announcements", Announcements);
		
		List<ProductType> ProductTypes = this.adminService.getTopGradeProductTypes();
		request.getSession().setAttribute("ProductTypes", ProductTypes);
		
		/*request.getSession().setAttribute("mallAdvice", mallAdvice);*/
		return "/main/welcome";
	}
	
	/**
	 * @return 跳转至登录页
	 */
	@RequestMapping("/tologin")
	public String tologin(){
		return"/main/login";
	}
	
	/**
	 * @return 跳转至注册页
	 */
	@RequestMapping("/toregister")
	public String register(HttpServletRequest request){
		String msg = request.getParameter("msg");
		request.setAttribute("msg", msg);
		return "/main/register";
	}
	
	@RequestMapping("/tologout")
	public void toLogout(HttpServletRequest request, HttpServletResponse response){
		try {
			request.getRequestDispatcher("/BuyerController/logout").forward(request, response);
		} catch (ServletException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	@RequestMapping("/toDetail")
	public String toDetail(HttpServletRequest request, HttpServletResponse response){
		String goodsId = request.getParameter("id");
		if(goodsId.substring(0, 6).equals("000001")){
			FruitGoods fruitGoods = (FruitGoods) productService.getProductById(goodsId);
			Seller seller = fruitGoods.getSeller();
			Shop shop = seller.getShop();
			String deString = GZipUtil.gunzip(fruitGoods.getDescription());
			request.getSession().setAttribute("description", deString);
			request.setAttribute("product", fruitGoods);
			request.setAttribute("seller", seller);
			request.setAttribute("shop", shop);
			return "/product/product_detail";
		}else if(goodsId.substring(0, 6).equals("000002")){
			BookGoods bookGoods = (BookGoods) productService.getProductById(goodsId);
			Seller seller = bookGoods.getSeller();
			Shop shop = seller.getShop();
			String deString = GZipUtil.gunzip(bookGoods.getDescription());
			request.setAttribute("product", bookGoods);
			request.setAttribute("seller", seller);
			request.setAttribute("shop", shop);
			request.getSession().setAttribute("description", deString);
			return "/product/product_detail";
		}
		return "/product/product_detail";
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/addToCart")
	@ResponseBody
	public String addCart(HttpServletRequest request, HttpServletResponse response, String num){
		String goodsID = request.getParameter("id");
		Product product = (Product) productService.getProductById(goodsID);
		Set<BasketItem> basket = new HashSet<BasketItem>();
		Set<BasketItem> sessionBasket = (Set<BasketItem>) request.getSession().getAttribute("myCart");
		Buyer buyer = (Buyer) request.getSession().getAttribute("current_user");
		
		BasketItem item = new BasketItem();
		item.setAddCount(Integer.parseInt(num));
		item.setProductIllustration("");
		item.setProduct(product);
		
		
		if(buyer == null){
			if (sessionBasket == null) {
				basket.add(item);
				sessionBasket = basket;
			} else {//有session
				// 合并到session
				for (BasketItem basketItem : sessionBasket) {
					if (basketItem.equals(item)) {
						basketItem.setAddCount(basketItem.getAddCount() + item.getAddCount());
						break;
					} else {
						sessionBasket.add(item);
					}
				}
				
			}
			request.getSession().setAttribute("myCart", sessionBasket);
		} else {
			item.setBuyer(buyer);
			productService.saveItemIntoCart(buyer, item);
			//request.getSession().setAttribute("myCart", buyer.getBasket());
			/*if (sessionBasket == null) {//session_1为空
				sessionBasket = (Set<BasketItem>) request.getSession().getAttribute("dbCart");//用户登陆后载入的数据库数据
				if(sessionBasket != null) {//数据库中原本有物品
					for (BasketItem basketItem : sessionBasket) {
						if(basketItem.equals(item)){
							basketItem.setAddCount(basketItem.getAddCount() + item.getAddCount());
							break;
						} else {
							sessionBasket.add(item);
						}
					}
				} else {//数据库中原本也是空
					basket.add(item);
					sessionBasket = basket;
				}
			} else {//session不为空
				Set<BasketItem> dbItems = productService.getBasketByUid(buyer);
				if (dbItems == null) {//数据库中原来没有
					for (BasketItem basketItem : sessionBasket) {
						if (basketItem.equals(item)) {
							basketItem.setAddCount(basketItem.getAddCount() + item.getAddCount());
							break;
						} else {
							sessionBasket.add(item);
						}
					}
				} else {//数据库中也有物品
					for (BasketItem dbItem : dbItems) {
						for (BasketItem sessionItem : sessionBasket) {
							if (dbItem.equals(sessionBasket)) {
								sessionItem.setAddCount(sessionItem.getAddCount() + dbItem.getAddCount());
								break;
							} else {
								sessionBasket.add(dbItem);
							}
						}
					}
					
				}
			}*/
		}
		
		return "/main/welcome";
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping("/toMyCart")
	public String toMyCart(HttpServletRequest request){
		String uri = request.getHeader("Referer");
		Buyer buyer = (Buyer) request.getSession().getAttribute("current_user");
		Set<BasketItem> itemList = (Set<BasketItem>) request.getSession().getAttribute("myCart");
		if(!uri.endsWith("toMyCart")){
			if(buyer != null){
				//合并session数据到数据库的操作在登录时已完成，添加操作进队数据库进行
				Set<BasketItem> carts = productService.getBasketByUid(buyer);
				request.getSession().setAttribute("mydbCart", carts);
				/*if(itemList != null) {
					Set<BasketItem> carts = productService.getBasketByUid(buyer);
					if (carts.size() != 0) {
						for (BasketItem sessionItem : itemList) {
							for (BasketItem cartItem : carts) {
								if (sessionItem.equals(cartItem)) {//如果该物品数据库已存在，将其数量增加
									sessionItem.setAddCount(cartItem.getAddCount() + sessionItem.getAddCount());
									break;
								} else {//否则将它放入session购物车
									itemList.add(cartItem);
								}
							}
						}
					}
					
				}*/ /*else {//session为空
					itemList = productService.getBasketByUid(buyer);
				}*/
			} else {
				request.getSession().setAttribute("myCart", itemList);
			}
		}
		return "/buyer/cart";
	}
	
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/delFromCart")
	@ResponseBody
	public String removeItemFromCart(HttpServletRequest request, String itemId, String itemDsc) {
		Buyer buyer = (Buyer) request.getSession().getAttribute("current_user");
		if (buyer == null) {
			Set<BasketItem> itemList = (Set<BasketItem>) request.getSession().getAttribute("myCart");
			for (BasketItem basketItem : itemList) {
				if((basketItem.getProduct().getProductId()).equals(itemId) && basketItem.getProductIllustration().equals(itemDsc)){
					itemList.remove(basketItem);
					break;
				}
			}
			request.getSession().setAttribute("myCart", itemList);
		} else {
			buyer = buyerService.findBuyerById(buyer.getBuyerID());
			for (BasketItem item : buyer.getBasket()) {
				boolean a = (item.getProduct().getProductId()).equals(itemId);
				boolean b = item.getProductIllustration().equals(itemDsc);
				if(a && b){
					buyerService.removeItem(item);
					break;
				}
			}
			buyer = buyerService.findBuyerById(buyer.getBuyerID());
			request.getSession().setAttribute("mydbCart", buyer.getBasket());
			request.getSession().setAttribute("current_user", buyer);
		}
		return "1";
	}
	
	/**
	 * 搜索controller
	 */
	@RequestMapping(value="/search")
	public String search(HttpServletRequest request){
		String pid = request.getParameter("page");
		String productname = request.getParameter("productname");
		QueryResult<Product> result = null;
		if (pid != null) {//非第一次调用
			int pidInt = Integer.parseInt(pid);
			int firstIndex = (pidInt-1)*5;
			result = productService.productQuery(firstIndex, productname);
		} else {
			request.getSession().setAttribute("queryname", productname);
			result = productService.productQuery(0, productname);
		}
		request.setAttribute("queryResult", result);
		return "/main/search_result";
	}
	
	@RequestMapping(value="/announcement")
	public String announcementDetail(HttpServletRequest request, String anno_id) {
		Announcement anno = this.adminService.getAnnouncement(anno_id);
		
		request.getSession().setAttribute("anno", anno);
		return "/main/anno";
	}
	
	@RequestMapping(value="/toSellerShop")
	public String toSellerShop(HttpServletRequest request,String id){
		Shop shop = sellerService.findShop(id);
		Seller seller = shop.getSeller();
		Iterator<Product> allGoods = seller.getProducts().iterator();
		List<Product> promotionGoods = sellerService.getPromotionGoods(seller.getsellerID());
		List<Product> newGoods = sellerService.getNewGoods(seller.getsellerID());
		List<Product> rankGoods = sellerService.getRanking(seller.getsellerID());
		request.getSession().setAttribute("shop", shop);
		request.getSession().setAttribute("seller", seller);
		request.getSession().setAttribute("promotionGoods", promotionGoods);
		request.getSession().setAttribute("newGoods", newGoods);
		request.getSession().setAttribute("rankGoods", rankGoods);
		request.getSession().setAttribute("allGoods", allGoods);
		String flag = "1";
		request.getSession().setAttribute("flag", flag);
		return "/seller/shop";
	}
	
	
}
